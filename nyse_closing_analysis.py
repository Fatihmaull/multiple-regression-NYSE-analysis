# -*- coding: utf-8 -*-
"""nyse-closing-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z0yRwCzDeH8w_iLSW9-ws9yEIuxLZTP7
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

import statsmodels.api as sm

# Load data
fundamentals = pd.read_csv("fundamentals.csv")
prices = pd.read_csv("prices-split-adjusted.csv")

# Hitung rata-rata harga per saham
price_avg = prices.groupby("symbol")[["open", "close", "high", "low", "volume"]].mean().reset_index()

# Ambil data fundamental terakhir
latest_fund = fundamentals.sort_values("Period Ending").drop_duplicates("Ticker Symbol", keep="last")

# Gabungkan
df = pd.merge(price_avg, latest_fund, left_on="symbol", right_on="Ticker Symbol")

# Pilih fitur
features = ['open', 'high', 'low', 'volume']
target = 'close'

df_model = df[features + [target]].dropna()

plt.figure(figsize=(8,6))
sns.heatmap(df_model.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

for col in features:
    plt.figure(figsize=(6,4))
    sns.scatterplot(x=df_model[col], y=df_model['close'])
    plt.title(f'Scatter Plot: {col} vs Close Price')
    plt.xlabel(col)
    plt.ylabel('Close Price')
    plt.grid(True)
    plt.show()

# Pisah data
X = df_model[features]
y = df_model['close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

# Evaluasi
print("Intercept:", model.intercept_)
print("Coefficients:", dict(zip(features, model.coef_)))
print("R² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Tambahkan konstanta untuk OLS
X_ols = sm.add_constant(X)
ols_model = sm.OLS(y, X_ols).fit()

# Ringkasan model
print(ols_model.summary())

# sekarang, bukan hanya variable teknikal yang digunakan, tapi juga variabel fundamental perusahaan
# Load data
fundamentals = pd.read_csv("fundamentals.csv")
prices = pd.read_csv("prices-split-adjusted.csv")

# Hitung rata-rata harga per saham
price_avg = prices.groupby("symbol")[["open", "close", "high", "low", "volume"]].mean().reset_index()

# Ambil data fundamental terakhir
latest_fund = fundamentals.sort_values("Period Ending").drop_duplicates("Ticker Symbol", keep="last")

# Gabungkan
df = pd.merge(price_avg, latest_fund, left_on="symbol", right_on="Ticker Symbol")

# Pilih fitur
# Tambahan variabel fundamental ke dalam model
features = [
    'open', 'high', 'low', 'volume',
    'Total Revenue', 'Net Income',
    'Total Assets', 'Total Liabilities', 'Total Equity'
]
target = 'close'

# semua nilai tidak null
df_model = df[features + [target]].dropna()

plt.figure(figsize=(8,6))
sns.heatmap(df_model.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

for col in features:
    plt.figure(figsize=(6,4))
    sns.scatterplot(x=df_model[col], y=df_model['close'])
    plt.title(f'Scatter Plot: {col} vs Close Price')
    plt.xlabel(col)
    plt.ylabel('Close Price')
    plt.grid(True)
    plt.show()

# Scatter plot antara prediksi vs aktual data

plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual Close Price")
plt.ylabel("Predicted Close Price")
plt.title("Actual vs Predicted Close Price (Multiple Regression)")
plt.grid(True)
plt.show()

# Pisah data
X = df_model[features]
y = df_model['close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

# Evaluasi
print("Intercept:", model.intercept_)
print("Coefficients:", dict(zip(features, model.coef_)))
print("R² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Tambahkan konstanta untuk OLS
X_ols = sm.add_constant(X)
ols_model = sm.OLS(y, X_ols).fit()

# Ringkasan model
print(ols_model.summary())

# Import library VIF
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant

# Ambil X data (tanpa target)
X_vif = df_model.drop(columns=['close'])

# Tambahkan konstanta (intercept)
X_vif_const = add_constant(X_vif)

# Hitung VIF
vif_data = pd.DataFrame()
vif_data["Feature"] = X_vif_const.columns
vif_data["VIF"] = [variance_inflation_factor(X_vif_const.values, i)
                   for i in range(X_vif_const.shape[1])]

vif_data

# @title VIF

from matplotlib import pyplot as plt
vif_data['VIF'].plot(kind='line', figsize=(8, 4), title='VIF')
plt.gca().spines[['top', 'right']].set_visible(False)

# Visualisasi scatter actual vs predicted
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.6, color='dodgerblue', edgecolors='k')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel("Actual Close Price")
plt.ylabel("Predicted Close Price")
plt.title("Actual vs Predicted Close Price")
plt.grid(True)
plt.show()